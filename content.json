[{"title":"请求转发与重定向","date":"2019-07-14T08:31:30.000Z","path":"2019/07/14/请求转发与重定向/","text":"请求转发：request.getRequestDispatcher().forward();重定向：response.sendRedirect(); — 请求转发 重定向 地址栏是否改变 不变 改变 是否保留第一次请求时的数据 保留 不保留 请求次数 一次 两次 跳转发生的位置 服务端 客户端 —","categories":[],"tags":[{"name":"request","slug":"request","permalink":"http://yoursite.com/tags/request/"},{"name":"response","slug":"response","permalink":"http://yoursite.com/tags/response/"}]},{"title":"Get、Post编码问题","date":"2019-07-13T08:07:43.000Z","path":"2019/07/13/Get、Post编码问题/","text":"使用Get和Post请求方式时出现的中文乱码问题 1.get请求方式出现乱码:(1)统一每一个变量的编码:new String(旧编码,新编码) 12String name = request.getParameter(&quot;uname&quot;);name = new String(name.getBytes(&quot;iso-8859-1&quot;),&quot;utf-8&quot;); (2)修改配置文件修改tomcat的server.xml文件,找到&lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt;在末尾加URIEncoding=”UTF-8”2.post请求方式出现乱码:设置编码request.setCharacterEncoding(&quot;UTF-8&quot;); 参考资料[1] : https://www.cnblogs.com/ajjava/p/8079933.html","categories":[],"tags":[{"name":"Get","slug":"Get","permalink":"http://yoursite.com/tags/Get/"},{"name":"Post","slug":"Post","permalink":"http://yoursite.com/tags/Post/"}]},{"title":"JSP九大内置对象(一)","date":"2019-07-12T02:10:47.000Z","path":"2019/07/12/JSP九大内置对象(一)/","text":"jsp内置对象是指可以不加声明和创建就可以在JSP页面脚本(Java程序片和Java表达式)中使用的成员变量。 对象名 功能 类型 作用域 request 向客户端请求数据 javax.servlet.ServletRequest Request response 封装了jsp产生的响应,然后被发送到客户端以响应客户的请求 javax.servlet.ServletResponse Page pageContext 为JSP页面包装页面的上下文。管理对属于JSP中特殊可见部分中己经命名对象的该问 javax.servlet.jsp.PageContext Page session 用来保存每个用户的信息,以便跟踪每个用户的操作状态 javax.servlet.http.HttpSession Session application 应用程序对象 javax.servlet.ServletContext Application out 向客户端输出数据 javax.servlet.jsp.JspWriter Page config 表示Servlet的配置,当一个Servlet初始化时,容器把某些信息通过此对象传递给这个Servlet javax.servlet.ServletConfig Page page Jsp实现类的实例,它是jsp本身,通过这个可以对它进行访问 javax.lang.Object Page exception 反映运行的异常 javax.lang.Throwable Page 1.out输出对象，向客户端输出内容常用方法: out.print(); //输出各种类型数据 out.newline(); //输出一个换行符 out.close(); //关闭流 2.request请求对象,存储客户端向服务端发送请求的信息常用方法： String getParameter(String name) //根据请求的字段名key,返回字段值value String[] getParametetValues(String name) //根据请求的字段名key,返回多个字段值value,例如多选框(checkbox) void setCharacterEncoding(“UTF-8”) //设置post方式的请求编码(tomcat7以前默认为ISO-8859-1,tomcat8以后默认为UTF-8) getRequestDispatcher(“b.jsp”).forward(request,response) //请求转发的方式跳转页面,从a跳转到b getServerContext() //获取项目的ServletContext对象 3.response响应对象,封装了所有响应信息并将服务器端资源数据输出到浏览器常用方法: void addCookie(Cookie cookie) //服务端向客户端增加cookie对象 void sendRedirect(String location) throws IOException //页面跳转的一种方式，重定向 void setContetType(String type) //设置服务端响应的编码","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://yoursite.com/tags/JSP/"}]},{"title":"JSP的页面元素(一)","date":"2019-07-11T13:26:50.000Z","path":"2019/07/11/JSP的页面元素(一)/","text":"JSP的页面元素组成:JSP脚本元素、JSP指令元素、JSP的静态元素、JSP注释元素、JSP动作元素 一.脚本元素Scriptlet(可以直接解析HTML语句)使用脚本元素可以将Java代码嵌入到JSP页面里，这些Java代码将出现在由JSP页面生成的Servelt中。脚本元素有三种：脚本、声明和表达式 (1)&lt;%……%&gt;里放局部变量和JAVA语句 1234&lt;% String name = &quot;张三&quot;; //定义局部变量,变量名:name,变量值:张三 out.print(&quot;hello&quot; + name); //JAVA语句%&gt; (2)&lt;%!……%&gt;里放全局变量和定义方法 1234567891011&lt;%! public String bookname; //定义全局变量,变量名:bookname /* 定义方法init() */ public void init() &#123; bookname = &quot;java书&quot;; &#125;%&gt; (3)&lt;%=……%&gt;里放输出表达式 123456/* 输出表达式末尾没有; */ &lt;%= &quot;hello&quot; + bookname%&gt; 二.指令元素指令元素主要用于为转换阶段提供JSP页面的相关信息。指令元素有三种：page、include、taglib。语法格式为：&lt;%@ directive attr=”value”%&gt;，attr=”value”可以有多个，用空格隔开。 (1)page指令 属性 描述 contentType contentType属性定义MIME类型和字符编码(浏览器解析jsp的编码) import 导入要使用的JAVA类，import属性可以出现多次,其他属性只能出现一次 language 指定jsp页面所用的脚本语言,默认为”java” pageEncoding jsp自身编码(jsp-&gt;java) (2)include指令 在JSP页面中静态包含一个文件(JSP被转换成Servlet时引入一个文件)语法格式：&lt;%@ include file=”filename(服务器端绝对路径)” %&gt; (3)taglib指令 引入核心标签库或EL函数库(JSTL)语法格式：&lt;%@ taglib prefix=”前缀” uri=””与前缀相关的标签描述符地址”%&gt; 参考资料[1] : https://blog.csdn.net/qq_36544360/article/details/81104834[2] : https://blog.csdn.net/qq_36544360/article/details/81104834","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://yoursite.com/tags/JSP/"}]},{"title":"虚拟路径与虚拟主机的配置","date":"2019-07-10T08:31:12.000Z","path":"2019/07/10/虚拟路径与虚拟主机的配置/","text":"虚拟路径：将web项目配置到webapps以外的目录虚拟主机：Tomcat服务器，允许用户在同一台计算机上，配置多个Web站点，在这种情况下，需要为每个Web站点，配置不同的主机名，即配置虚拟主机 一.虚拟路径的配置方式一：在conf文件夹中server.xml文件中进行配置，找到 1&lt;host&gt;……&lt;/host&gt; 在host标签中添加&lt;Context docBase=&quot;D:\\JspProject&quot; path=&quot;/JspProject&quot; /&gt;（注：path为虚拟路径，docBase为实际路径，path为相对webapps而言）方式二：在conf-&gt;Catalina-&gt;localhost中新建xml文件（名称与项目名相同），写代码&lt;Context docBase=:\\JspProject&quot; path=&quot;/JspProject&quot; /&gt; 二.虚拟主机的配置在conf文件夹中server.xml文件中进行配置，找到 1&lt;Engine&gt;……&lt;/Engine&gt; 在Engine标签中添加 123&lt;Host appBase=&quot;d:\\JspProject&quot; name=&quot;www.test.com&quot;&gt; &lt;Context docBase=&quot;d:\\JspProject&quot; path=&quot;/&quot; /&gt;&lt;/Host&gt; 修改默认引擎&lt;Engine defaultHost=&quot;www.text.com&quot;&gt;在C盘Windows\\System32\\drivers\\etc\\hosts中增加一条127.0.0.1（本机IP地址） www.test.com（虚拟主机）","categories":[],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"http://yoursite.com/tags/Tomcat/"},{"name":"虚拟路径与虚拟主机","slug":"虚拟路径与虚拟主机","permalink":"http://yoursite.com/tags/虚拟路径与虚拟主机/"}]},{"title":"Tomcat的安装配置与常见问题","date":"2019-07-09T14:49:35.000Z","path":"2019/07/09/Tomcat的安装配置与常见问题/","text":"Tomcat的安装&amp;&amp;配置&amp;&amp;常见问题 一.Tomcat的下载安装进入tomcat官网http://tomcat.apache.org/下载，如图所示选择左侧Download，选择版本号，以tomcat8为例选择zip压缩包，下载解压缩 二.Tomcat环境配置电脑右键–&gt;属性–&gt;高级系统设置–&gt;环境变量1.配置JDK环境变量（略）2.新建系统变量，如图变量名设置为CATALINA_HOME，变量值为tomcat的根路径3.编辑Path系统变量，新建添加%CATALINA_HOME%\\lib;%CATALINA_HOME%\\bin4.tomcat启动验证：根路径下的bin文件夹中，startup.bat(不要关闭)浏览器中输入http://localhost:8080，出现下图则配置正确否则需检查是否环境变量配置错误、端口冲突（Access Error:404 – Not Found）等…… 三.常见问题解决方案1.端口号冲突方案一：中止占用端口号8080的进程（1）管理员身份运行cmd，输入命令：netstat -ano | findstr &quot;8080&quot; 来查看端口被哪个进程所占用(例PID为5712的进程占用了8080端口）（2）输入命令tasklist | findstr &quot;5712&quot;来查看进程号为5712所对应的进程（3）结束该进程taskkill /f /t /im ApplicationWebServer.exe方案二：修改端口号根路径下conf文件夹中的server.xml中找到Connector标签，修改里面的port值 &lt;Connector connectionTimeout=&quot;20000&quot; port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; redirectPort=&quot;8443&quot;/&gt; 2.startup.bat出现乱码 参考https://blog.csdn.net/weixin_43244698/article/details/85304535 参考资料[Windows中查看8080端口的占用情况并关闭相关进程] : https://blog.csdn.net/qiushisoftware/article/details/81203112[Tomcat服务器下载、安装、配置环境变量教程(超详细)] : https://blog.csdn.net/qq_40881680/article/details/83582484#Tomcat%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E6%95%99%E7%A8%8B[Tomcat的startup.bat启动后显示乱码] : https://blog.csdn.net/weixin_43244698/article/details/85304535[JavaWeb视频教程] ： https://www.bilibili.com/video/av29086718","categories":[],"tags":[{"name":"Tomcat","slug":"Tomcat","permalink":"http://yoursite.com/tags/Tomcat/"},{"name":"环境配置","slug":"环境配置","permalink":"http://yoursite.com/tags/环境配置/"}]},{"title":"Hello World","date":"2019-07-08T00:41:24.064Z","path":"2019/07/08/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]